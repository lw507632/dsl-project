// automatically generated by Xtext
grammar fr.unice.polytech.dsl.arduinoml.aml.Aml with org.eclipse.xtext.common.Terminals

import "http://www.example.org/arduinoml" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

App returns App:
	'App'
	name=EString
	'{'
		bricks+=Brick (bricks+=Brick)*
		states+=State (states+=State)*
		conditions+=Condition (conditions+=Condition)*
		transitions+=Transition (transitions+=Transition)*
	'}';
	
BRICK_VALUE returns ecore::EString:
	("HIGH" | "LOW" | INT);
	
Brick returns Brick:
	(Sensor | Actuator) (type=BrickType)? name=EString ':' pin=INT; //using terminal rule INT we can only use positive INT

Condition returns Condition:
	(SimpleCondition | MultipleCondition);

EString returns ecore::EString:
	STRING | ID;

State returns State:
	{State}
	'State'
	name=EString
	':'
		(actions+=Action ( ',' actions+=Action)*)?;

Transition returns Transition:
	previous=[State|EString] '--' condition=[Condition|EString] '-->' next=[State|EString];
	
enum BrickType returns BrickType:
				DIGITAL = 'DIGITAL' | ANALOGICAL = 'ANALOGICAL';

Sensor returns Sensor:
	{Sensor}
	'Sensor';

Actuator returns Actuator:
	{Actuator}
	'Actuator';

Action returns Action:
	actuator=[Actuator|EString]? ':=' (value=BRICK_VALUE);

SimpleCondition returns SimpleCondition:
	'Condition' name=EString ':'
		(sensor=[Sensor|EString] 'is' (comparator=COMPARATOR)? value=BRICK_VALUE);

SimpleConditionInline returns SimpleCondition:
	{SimpleCondition}
	sensor=[Sensor|EString]? 'is' (comparator=COMPARATOR)? (value=BRICK_VALUE);

MultipleCondition returns MultipleCondition:
	'Condition' name=EString ':'
	 (conditions+=SimpleConditionInline operators+=OPERATOR conditions+=SimpleConditionInline)
	 (operators+=OPERATOR conditions+=SimpleConditionInline)*;

enum COMPARATOR returns COMPARATOR:
				EQUALS = '==' | NON_EQUALS = '!=' | SUPERIOR = '>' | INFERIOR = '<' | SUPERIOR_OR_EQUALS = '>=' | INFERIOR_OR_EQUALS = '<='
				| EQUALS = 'EQUALS' | NON_EQUALS = "NON_EQUALS" | SUPERIOR = "SUPERIOR" | INFERIOR = "INFERIOR" 
				| INFERIOR_OR_EQUALS = "INFERIOR_OR_EQUALS" | SUPERIOR_OR_EQUALS = "SUPERIOR_OR_EQUALS";

enum OPERATOR returns OPERATOR:
				AND = 'AND' | OR = 'OR';
