// automatically generated by Xtext
grammar fr.unice.polytech.dsl.arduinoml.aml.Aml with org.eclipse.xtext.common.Terminals

import "http://www.example.org/arduinoml" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//TODO : Faire en sorte qu'on puisse déclarer les objets dans le desordre
//TODO : Chaining de transaction
App returns App:
	'App'
	name=EString
	'{'
		bricks+=Brick (bricks+=Brick)*
		states+=State (states+=State)*
		conditions+=Condition (conditions+=Condition)*
		transitions+=Transition (transitions+=Transition)*
	'}';

Brick returns Brick:
	(Sensor | Actuator) name=EString ':' pin=EInt;

EString returns ecore::EString:
	STRING | ID;

State returns State:
	{State}
	'State'
	name=EString
	':'
		(actions+=Action ( "," actions+=Action)*)?;

Condition returns Condition:
	'Condition'
	name=EString
	':'
		(sensors+=[Sensor|EString] "is" values+=SIGNAL (operators+=OPERATOR sensors+=[Sensor|EString] "is" values+=SIGNAL)*)?;

EInt returns ecore::EInt:
	'-'? INT;

Sensor returns Sensor:
	{Sensor}
	'Sensor';

Actuator returns Actuator:
	{Actuator}
	'Actuator';

Action returns Action:
	actuator=[Actuator|EString]? "=>" (value=SIGNAL);

Transition returns Transition:
	previous=[State|EString] "--" condition=[Condition|EString] "-->" next=[State|EString];

enum SIGNAL returns SIGNAL:
				HIGH = 'HIGH' | LOW = 'LOW';
enum OPERATOR returns OPERATOR:
				OR = 'OR' | AND = 'AND';
